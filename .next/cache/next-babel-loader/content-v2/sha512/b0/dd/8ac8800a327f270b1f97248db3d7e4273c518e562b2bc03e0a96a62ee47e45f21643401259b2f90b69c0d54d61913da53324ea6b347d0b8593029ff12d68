{"ast":null,"code":"import { applyMiddleware, createStore } from \"redux\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport createSagaMiddleware from \"redux-saga\";\nimport logger from \"redux-logger\";\nimport rootSaga from \"./sagas\";\nimport rootReducer from \"./reducers\";\nexport var makeStore = function makeStore(context) {\n  var sagaMiddleware = createSagaMiddleware();\n  var middleware = [sagaMiddleware];\n  middleware.push(logger);\n  var store = createStore(rootReducer, applyMiddleware.apply(void 0, middleware));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["E:/Nextjs/next-cy/src/store.js"],"names":["applyMiddleware","createStore","createWrapper","createSagaMiddleware","logger","rootSaga","rootReducer","makeStore","context","sagaMiddleware","middleware","push","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,OAAOC,QAAP,MAAqB,SAArB;AACA,OAAOC,WAAP,MAAwB,YAAxB;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAAa;AACpC,MAAMC,cAAc,GAAGN,oBAAoB,EAA3C;AACA,MAAMO,UAAU,GAAG,CAACD,cAAD,CAAnB;AACAC,EAAAA,UAAU,CAACC,IAAX,CAAgBP,MAAhB;AACA,MAAMQ,KAAK,GAAGX,WAAW,CAACK,WAAD,EAAcN,eAAe,MAAf,SAAmBU,UAAnB,CAAd,CAAzB;AACAE,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBT,QAAnB,CAAjB;AACA,SAAOO,KAAP;AACD,CAPM;AASP,OAAO,IAAMG,OAAO,GAAGb,aAAa,CAACK,SAAD,EAAY;AAAES,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["import { applyMiddleware, createStore } from \"redux\";\r\nimport { createWrapper } from \"next-redux-wrapper\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport logger from \"redux-logger\";\r\n\r\nimport rootSaga from \"./sagas\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport const makeStore = (context) => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middleware = [sagaMiddleware];\r\n  middleware.push(logger);\r\n  const store = createStore(rootReducer, applyMiddleware(...middleware));\r\n  store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  return store;\r\n};\r\n\r\nexport const wrapper = createWrapper(makeStore, { debug: true });\r\n"]},"metadata":{},"sourceType":"module"}